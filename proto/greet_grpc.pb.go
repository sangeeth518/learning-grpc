// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExampleClient is the client API for Example service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleClient interface {
	ServerReply(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	ServerClientStreaming(ctx context.Context, opts ...grpc.CallOption) (Example_ServerClientStreamingClient, error)
	SereverStreaming(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Example_SereverStreamingClient, error)
}

type exampleClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleClient(cc grpc.ClientConnInterface) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) ServerReply(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/Example/ServerReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) ServerClientStreaming(ctx context.Context, opts ...grpc.CallOption) (Example_ServerClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[0], "/Example/ServerClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServerClientStreamingClient{stream}
	return x, nil
}

type Example_ServerClientStreamingClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type exampleServerClientStreamingClient struct {
	grpc.ClientStream
}

func (x *exampleServerClientStreamingClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleServerClientStreamingClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) SereverStreaming(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Example_SereverStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[1], "/Example/SereverStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleSereverStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Example_SereverStreamingClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type exampleSereverStreamingClient struct {
	grpc.ClientStream
}

func (x *exampleSereverStreamingClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleServer is the server API for Example service.
// All implementations must embed UnimplementedExampleServer
// for forward compatibility
type ExampleServer interface {
	ServerReply(context.Context, *HelloRequest) (*HelloResponse, error)
	ServerClientStreaming(Example_ServerClientStreamingServer) error
	SereverStreaming(*HelloRequest, Example_SereverStreamingServer) error
	mustEmbedUnimplementedExampleServer()
}

// UnimplementedExampleServer must be embedded to have forward compatible implementations.
type UnimplementedExampleServer struct {
}

func (UnimplementedExampleServer) ServerReply(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerReply not implemented")
}
func (UnimplementedExampleServer) ServerClientStreaming(Example_ServerClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerClientStreaming not implemented")
}
func (UnimplementedExampleServer) SereverStreaming(*HelloRequest, Example_SereverStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SereverStreaming not implemented")
}
func (UnimplementedExampleServer) mustEmbedUnimplementedExampleServer() {}

// UnsafeExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServer will
// result in compilation errors.
type UnsafeExampleServer interface {
	mustEmbedUnimplementedExampleServer()
}

func RegisterExampleServer(s grpc.ServiceRegistrar, srv ExampleServer) {
	s.RegisterService(&Example_ServiceDesc, srv)
}

func _Example_ServerReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).ServerReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Example/ServerReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).ServerReply(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_ServerClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).ServerClientStreaming(&exampleServerClientStreamingServer{stream})
}

type Example_ServerClientStreamingServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type exampleServerClientStreamingServer struct {
	grpc.ServerStream
}

func (x *exampleServerClientStreamingServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleServerClientStreamingServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Example_SereverStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServer).SereverStreaming(m, &exampleSereverStreamingServer{stream})
}

type Example_SereverStreamingServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type exampleSereverStreamingServer struct {
	grpc.ServerStream
}

func (x *exampleSereverStreamingServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Example_ServiceDesc is the grpc.ServiceDesc for Example service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Example_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerReply",
			Handler:    _Example_ServerReply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerClientStreaming",
			Handler:       _Example_ServerClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SereverStreaming",
			Handler:       _Example_SereverStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
